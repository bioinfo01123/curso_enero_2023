



n = 1
for var in sec:
    if ('c' not in var) or ('g' not in var):
        print('#########', var)
    else:
        gc = (dict(Counter(var))['c'] + dict(Counter(var))['g'])/len(var)
        print(n, len(var), dict(Counter(var)), round(gc * 100, 2),
             len(re.findall('gc', var)), var.upper())
    n += 1
    
    
resultado = []
n = 1
for var in sec:
    if ('c' not in var) or ('g' not in var):
        pass
    else:
        gc = (dict(Counter(var))['c'] + dict(Counter(var))['g'])/len(var)
        resultado.append([n, len(var), dict(Counter(var)), round(gc * 100, 2),
             len(re.findall('gc', var)), var.upper()])
    n += 1


def encontrar(df = DataFrame(), pat = '', col = ''):
    objetos = []
    for i, j in zip(DataFrame(df.dtypes).index,
              DataFrame(df.dtypes)[0]):
        if j == 'object':
            objetos.append(i)
    if col in objetos:
        w = df[df[col].str.contains(pat) == True]
        return w
    else:
        print('!!!! Introducir columnas de tipo objeto')


enriquecimiento2 = enriquecimiento.merge(ontologia, on = 'Term', how = 'left')

enriquecimiento2.pivot_table(values = ['list_count',
                                      'back_count',
                                      'tot_list',
                                      'tot_back'],
                      index = ['Aspect'],
                      aggfunc = np.mean)






for cat in category_names:
    df4 = pd.pivot_table(df3,
                     values=M,
                     index=cat,
                     aggfunc=sum).reset_index()
    df5 = df4.sort_values(by =M,ascending=False).reset_index(drop=True)
    top5 = df5.head(10)
    
    plt.gca().set_title(cat, fontsize=30)
    top5[M].plot.pie(label = '', cmap='Pastel1',figsize = (7,7), 
                            title ="", fontsize = 12,autopct='%1.2f%%', 
                            shadow = False,
                            wedgeprops   = { 'linewidth' : 2,'edgecolor' : "silver" })
    circle = plt.Circle( (0,0), 0.7, color='white')
    p=plt.gcf()
    p.gca().add_artist(circle)
    plt.show()
